apiVersion: apps/v1
kind: Deployment
metadata:
  name: nestjs-app
  namespace: dev-nest
  labels:
    app.kubernetes.io/name: nestjs-app
    app.kubernetes.io/part-of: devops-test
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: nestjs-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nestjs-app
        app.kubernetes.io/part-of: devops-test
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
        - name: app
          image: nestjs-redis:dev
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
          env:
            - name: NODE_ENV
              value: "production"
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef: { name: app-config, key: REDIS_HOST }
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef: { name: app-config, key: REDIS_PORT }
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef: { name: redis-secret, key: REDIS_PASSWORD }
          readinessProbe:
            httpGet: { path: /redis, port: 3000 }
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /redis, port: 3000 }
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities: { drop: ["ALL"] }
---
apiVersion: v1
kind: Service
metadata:
  name: nestjs-app
  namespace: dev-nest
  labels:
    app.kubernetes.io/name: nestjs-app
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: nestjs-app
  ports:
    - name: http
      port: 80
      targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nestjs-app
  namespace: dev-nest
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: nest-redis.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nestjs-app
                port:
                  number: 80
